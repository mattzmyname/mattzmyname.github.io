{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Project","props","componentDidMount","handleRequest","e","axios","get","Configs","gitHubLink","gitHubUsername","gitHubQuerry","then","response","setState","projectsArray","data","slice","catch","error","console","log","finally","state","heading","id","className","this","map","project","key","value","Component","ProjectCard","handleUpdatetime","date","Date","pushed_at","diff","getTime","hours","Math","trunc","updated_at","toString","day","getDate","monthIndex","getMonth","year","getFullYear","stargazers_count","download_url","svn_url","repo_url","name","description","href","target","languages_url","Language","array","total_count","index","push","language","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b4661d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Configs from \"./configurations.json\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n\r\nclass Project extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heading: \"Recent Projects\",\r\n            projectsArray: []\r\n        };\r\n    }\r\n    componentDidMount = () => {\r\n        this.handleRequest();\r\n    };\r\n\r\n    handleRequest = e => {\r\n        axios\r\n            .get(Configs.gitHubLink + Configs.gitHubUsername + Configs.gitHubQuerry)\r\n            .then(response => {\r\n                // handle success\r\n                // console.log(response.data.slice(0, 4));\r\n                this.setState({\r\n                    projectsArray: response.data.slice(0, 4)\r\n                });\r\n            })\r\n            .catch(function(error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function() {\r\n                // always executed\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id=\"divproject\"\r\n                className=\"jumbotron jumbotron-fluid bg-transparent m-0\"\r\n            >\r\n                <div className=\" container container-fluid p-5\">\r\n                    <h1 className=\"display-4 pb-5\">{this.state.heading}</h1>\r\n                    <div className=\" row\">\r\n                        {this.state.projectsArray.map(project => (\r\n                            <ProjectCard\r\n                                key={project.id}\r\n                                id={project.id}\r\n                                value={project}\r\n                            ></ProjectCard>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ProjectCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            updated_at: \"0 mints\",\r\n            stargazers_count: this.props.value.stargazers_count,\r\n            download_url: this.props.value.svn_url + \"/archive/master.zip\",\r\n            repo_url: this.props.value.svn_url\r\n        };\r\n    }\r\n    componentDidMount = () => {\r\n        this.handleUpdatetime();\r\n    };\r\n\r\n    handleUpdatetime = () => {\r\n        const date = new Date(this.state.value.pushed_at);\r\n        const nowdate = new Date();\r\n        var diff = nowdate.getTime() - date.getTime();\r\n        var hours = Math.trunc(diff / 1000 / 60 / 60);\r\n        if (hours < 24) {\r\n            this.setState({ updated_at: hours.toString() + \" hours ago\" });\r\n        } else {\r\n            var monthNames = [\r\n                \"January\",\r\n                \"February\",\r\n                \"March\",\r\n                \"April\",\r\n                \"May\",\r\n                \"June\",\r\n                \"July\",\r\n                \"August\",\r\n                \"September\",\r\n                \"October\",\r\n                \"November\",\r\n                \"December\"\r\n            ];\r\n            var day = date.getDate();\r\n            var monthIndex = date.getMonth();\r\n            var year = date.getFullYear();\r\n            this.setState({\r\n                updated_at: \"on \" + day + \" \" + monthNames[monthIndex] + \" \" + year\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-6\">\r\n                <div className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\r\n                    {/* <img src=\"\" className=\"card-img-top\" alt=\"...\" /> */}\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{this.state.value.name} </h5>\r\n                        <p className=\"card-text\">{this.state.value.description} </p>\r\n                        <a\r\n                            href={this.state.download_url}\r\n                            className=\" btn btn-outline-secondary mr-3\"\r\n                        >\r\n                            <i className=\"fab fa-github\" /> Clone Project\r\n                        </a>\r\n                        <a\r\n                            href={this.state.repo_url}\r\n                            target=\" _blank\"\r\n                            className=\" btn btn-outline-secondary\"\r\n                        >\r\n                            <i className=\"fab fa-github\" /> Repo\r\n                        </a>\r\n                        <hr />\r\n                        <Language value={this.state.value.languages_url}></Language>\r\n                        <p className=\"card-text\">\r\n                            <a className=\" text-dark card-link mr-4\">\r\n                                <i className=\"fab fa-github\" /> Stars{\" \"}\r\n                                <span className=\"badge badge-dark\">\r\n                  {this.state.stargazers_count}\r\n                </span>\r\n                            </a>\r\n                            <small className=\"text-muted\">\r\n                                Updated {this.state.updated_at}\r\n                            </small>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Language extends Component {\r\n    state = {\r\n        data: []\r\n    };\r\n    componentDidMount = () => {\r\n        this.handleRequest();\r\n    };\r\n\r\n    handleRequest = () => {\r\n        axios\r\n            .get(this.props.value)\r\n            .then(response => {\r\n                // handle success\r\n                // console.log(response.data);\r\n                this.setState({ data: response.data });\r\n            })\r\n            .catch(function(error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function() {\r\n                // always executed\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const array = [];\r\n        var total_count = 0;\r\n        for (var index in this.state.data) {\r\n            array.push(index);\r\n            total_count = total_count + this.state.data[index];\r\n            // console.log(index, this.state.data[index]);\r\n        }\r\n        // console.log(\"array contains \", array, this.state.data[array[0]]);\r\n        return (\r\n            <div className=\"pb-3\">\r\n                Languages:{\" \"}\r\n                {array.map(language => (\r\n                    <a key={language} className=\"badge badge-light card-link\">\r\n                        {language}:{\" \"}\r\n                        {Math.trunc((this.state.data[language] / total_count) * 1000) / 10}{\" \"}\r\n                        %\r\n                    </a>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Project></Project>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}